// Generated by CoffeeScript 1.6.1

/*
comb(0, [[1], [2]])
=> [
    [[0],[1],[2]],
    [[1, 2], [3]],
    [[1], [2, 3]]  
   ]
*/


(function() {
  var allComb, comb, evalComb, extendArray, getBestComb, mergeItems, the1yuan;

  comb = function(x, ys) {
    var a, i, result, t, zs, _i, _ref;
    a = ys.slice(0);
    a.push([x]);
    result = [a];
    for (i = _i = 0, _ref = ys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      zs = ys.slice(0);
      t = zs[i].slice(0);
      t.push(x);
      zs[i] = t;
      result.push(zs);
    }
    return result;
  };

  extendArray = function(xs, ys) {
    return xs.push.apply(xs, ys);
  };

  allComb = function(items) {
    var ary, e, tail, ys, _i, _len;
    if (items.length === 1) {
      return [[items]];
    }
    tail = allComb(items.slice(1));
    ary = [];
    for (_i = 0, _len = tail.length; _i < _len; _i++) {
      e = tail[_i];
      ys = comb(items[0], e);
      extendArray(ary, ys);
    }
    return ary;
  };

  evalComb = function(comb, rate) {
    var sum, totalCost, x, xs, _i, _j, _len, _len1;
    totalCost = 0;
    for (_i = 0, _len = comb.length; _i < _len; _i++) {
      xs = comb[_i];
      sum = 0;
      for (_j = 0, _len1 = xs.length; _j < _len1; _j++) {
        x = xs[_j];
        sum += x.price;
      }
      totalCost += Math.round(sum * rate);
    }
    return totalCost;
  };

  getBestComb = function(items, rate) {
    var bestComb, bestCost, combList, x, xCost, _i, _len;
    combList = allComb(items);
    bestComb = combList[0];
    bestCost = evalComb(combList[0], rate);
    for (_i = 0, _len = combList.length; _i < _len; _i++) {
      x = combList[_i];
      xCost = evalComb(x, rate);
      if (xCost < bestCost || (xCost === bestCost && x.length < bestComb.length)) {
        bestComb = x;
        bestCost = xCost;
      }
    }
    return bestComb;
  };

  mergeItems = function(items) {
    var i, j, t, _i, _ref, _results;
    items = items.slice(0);
    _results = [];
    for (i = _i = 0, _ref = items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (items[i] != null) {
        _results.push(t = items[i] = (function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = i, _ref1 = items.length; i <= _ref1 ? _j < _ref1 : _j > _ref1; j = i <= _ref1 ? ++_j : --_j) {
            if ((items[j].id != null) && items[j].id === t.id) {
              t.num += 1;
              _results1.push(delete items[j]);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  the1yuan = function(itemList, rate) {
    var i, item, newList, result, _i, _j, _len, _ref;
    newList = [];
    for (_i = 0, _len = itemList.length; _i < _len; _i++) {
      item = itemList[_i];
      for (i = _j = 1, _ref = item.num; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
        newList.push(item);
      }
      item.num = 1;
    }
    return result = getBestComb(newList);
  };

  window.the1yuan = the1yuan;

}).call(this);
